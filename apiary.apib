FORMAT: 1A
HOST: https://hellobookslibrary.herokuapp.com/api/v1

# hellobooks

Hello_Books API is an application that helps manage a library and its processes
like stocking,  tracking and renting books. With this application users are able
to find and rent books. The  application also has an admin section where the admin 
can do things like add books, delete  books and modify book information.

### Register User [/auth/register]
Endpoint for creating a new user given the email, password and role.

#### register  [POST]

+ Request (application/x-www-form-urlencoded)

        email=jones@gmail.com&password=qwerty1234&role=admin
    
+ Response 201 (appliaction/json)

        {
            "message": "user_created successfully"
        }


### Login User [/auth/login]
User logs in by providing the email and password.

#### login [POST]

+ Request (application/x-www-form-urlencoded)

        email=jones@gmail.com&password=qwerty1234
        
+ Response 200 

        {
            "message": "user_login successfully"
        }
        
### all books [/books]
#### get books [GET]
Send a request to get/view all the books available in the catalogue.

+ Response 200 

        [
         {
            "bookid": "001",
            "book_name": "Introduction to html",
            "book_category": "engineering"
        } {
            "bookid": "003",
            "book_name": "Introduction to java",
            "book_category": "engineering"
        }
        ]


#### create book [POST]
An admin adds book to the catalogue

+ Request (application/x-www-form-urlencoded)

        bookid=001&bookname=introduction to html&book_category=engineering
        
        
+ Response 201 

        {
            "message": "book created successfully"
        }

### one book [/book/1]
#### get one book [GET]
A user can view a single bookusing the book id

+ Response 200 (application/json)

        {
            "bookid": "001",
            "book_name": "Introduction to html",
            "book_category": "engineering"
        }

#### delete a book [DELETE]
An admin can delete a a user by the id

+ Response 204

#### edit a book [PUT]

+ Request (application/x-www-form-urlencoded)
        
        bookname=introduction to cisco&book_category=engineering
        
+ Response 201 (application/json)

        {
            "message": "edit was successfful"
        }
        
        
### Borrow [/users/books/<bookid]
Users can borrow books from the library
#### Borrow [POST]

+ Request (application/x-www-form-urlencoded)

+ Response 200

        {
            "message": "You have borrowed a book with id {}"
                                       .format(bookid)
        }

### Logout [/logout]
A user is able to logout and clears the session

#### logout [POST]

+ Response 200 (application/json)

        {
            "message": "you logged out"
        }
### reset password [/reset-password]

#### reset password [POST]
A user can reset their password

+ Request (application/x-www-form-urlencoded)

        email=jones@gmail.com&new_password=asdfgh12345
    
+ Response 200 (application/json)

        {
            "message": "password reset successful"
        }